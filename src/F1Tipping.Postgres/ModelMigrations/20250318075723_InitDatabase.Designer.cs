// <auto-generated />
using System;
using System.Collections.Generic;
using F1Tipping.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace F1Tipping.Postgres.ModelMigrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20250318075723_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("F1Tipping.Model.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1Tipping.Model.RacingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RacingEntities");

                    b.HasDiscriminator().HasValue("RacingEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1Tipping.Model.Result", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid?>("ResultHolderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Set")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SetByAuthUser")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "Type");

                    b.HasIndex("ResultHolderId");

                    b.ToTable("Results");

                    b.HasDiscriminator().HasValue("Result");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1Tipping.Model.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("F1Tipping.Model.Tipping.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<Guid>>("AdditionalAuthedUsers")
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("AuthUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("F1Tipping.Model.Tipping.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SubmittedBy_AuthUser")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TipperId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SelectionId");

                    b.HasIndex("TipperId");

                    b.HasIndex("TargetEventId", "TargetType");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("MultiEntityResultRacingEntity", b =>
                {
                    b.Property<Guid>("ResultHoldersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MultiEntityResultEventId")
                        .HasColumnType("uuid");

                    b.Property<int>("MultiEntityResultType")
                        .HasColumnType("integer");

                    b.HasKey("ResultHoldersId", "MultiEntityResultEventId", "MultiEntityResultType");

                    b.HasIndex("MultiEntityResultEventId", "MultiEntityResultType");

                    b.ToTable("MultiEntityResultRacingEntity");
                });

            modelBuilder.Entity("F1Tipping.Model.Race", b =>
                {
                    b.HasBaseType("F1Tipping.Model.Event");

                    b.Property<DateTimeOffset>("QualificationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("RaceStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeekendId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeekendId");

                    b.HasDiscriminator().HasValue("Race");
                });

            modelBuilder.Entity("F1Tipping.Model.Season", b =>
                {
                    b.HasBaseType("F1Tipping.Model.Event");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Season");
                });

            modelBuilder.Entity("F1Tipping.Model.Driver", b =>
                {
                    b.HasBaseType("F1Tipping.Model.RacingEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("F1Tipping.Model.Team", b =>
                {
                    b.HasBaseType("F1Tipping.Model.RacingEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("F1Tipping.Model.MultiEntityResult", b =>
                {
                    b.HasBaseType("F1Tipping.Model.Result");

                    b.HasDiscriminator().HasValue("MultiEntityResult");
                });

            modelBuilder.Entity("F1Tipping.Model.Result", b =>
                {
                    b.HasOne("F1Tipping.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Tipping.Model.RacingEntity", "ResultHolder")
                        .WithMany()
                        .HasForeignKey("ResultHolderId");

                    b.Navigation("Event");

                    b.Navigation("ResultHolder");
                });

            modelBuilder.Entity("F1Tipping.Model.Round", b =>
                {
                    b.HasOne("F1Tipping.Model.Season", "Season")
                        .WithMany("Rounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("F1Tipping.Model.Tipping.Player", b =>
                {
                    b.OwnsOne("F1Tipping.Model.Tipping.Player+Identity", "Details", b1 =>
                        {
                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DisplayName")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("Details");
                });

            modelBuilder.Entity("F1Tipping.Model.Tipping.Tip", b =>
                {
                    b.HasOne("F1Tipping.Model.RacingEntity", "Selection")
                        .WithMany()
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Tipping.Model.Tipping.Player", "Tipper")
                        .WithMany()
                        .HasForeignKey("TipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Tipping.Model.Result", "Target")
                        .WithMany()
                        .HasForeignKey("TargetEventId", "TargetType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selection");

                    b.Navigation("Target");

                    b.Navigation("Tipper");
                });

            modelBuilder.Entity("MultiEntityResultRacingEntity", b =>
                {
                    b.HasOne("F1Tipping.Model.RacingEntity", null)
                        .WithMany()
                        .HasForeignKey("ResultHoldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("F1Tipping.Model.MultiEntityResult", null)
                        .WithMany()
                        .HasForeignKey("MultiEntityResultEventId", "MultiEntityResultType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("F1Tipping.Model.Race", b =>
                {
                    b.HasOne("F1Tipping.Model.Round", "Weekend")
                        .WithMany("Events")
                        .HasForeignKey("WeekendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weekend");
                });

            modelBuilder.Entity("F1Tipping.Model.Driver", b =>
                {
                    b.HasOne("F1Tipping.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("F1Tipping.Model.Round", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("F1Tipping.Model.Season", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
