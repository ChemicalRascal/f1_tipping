// <auto-generated />
using System;
using F1Tipping.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace F1Tipping.Data.ModelMigrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20250209115245_CreateModel")]
    partial class CreateModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("F1Tipping.Model.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1Tipping.Model.RacingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("RacingEntities");

                    b.HasDiscriminator().HasValue("RacingEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("F1Tipping.Model.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Set")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SetByAuthUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ResultHolderId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("F1Tipping.Model.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("F1Tipping.Model.Race", b =>
                {
                    b.HasBaseType("F1Tipping.Model.Event");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WeekendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WeekendId");

                    b.HasDiscriminator().HasValue("Race");
                });

            modelBuilder.Entity("F1Tipping.Model.Season", b =>
                {
                    b.HasBaseType("F1Tipping.Model.Event");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Season");
                });

            modelBuilder.Entity("F1Tipping.Model.Driver", b =>
                {
                    b.HasBaseType("F1Tipping.Model.RacingEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("F1Tipping.Model.Team", b =>
                {
                    b.HasBaseType("F1Tipping.Model.RacingEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("F1Tipping.Model.Result", b =>
                {
                    b.HasOne("F1Tipping.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("F1Tipping.Model.RacingEntity", "ResultHolder")
                        .WithMany()
                        .HasForeignKey("ResultHolderId");

                    b.Navigation("Event");

                    b.Navigation("ResultHolder");
                });

            modelBuilder.Entity("F1Tipping.Model.Race", b =>
                {
                    b.HasOne("F1Tipping.Model.Round", "Weekend")
                        .WithMany()
                        .HasForeignKey("WeekendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weekend");
                });

            modelBuilder.Entity("F1Tipping.Model.Driver", b =>
                {
                    b.HasOne("F1Tipping.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
